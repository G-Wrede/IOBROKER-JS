var weatherIcon, temp, minTemp, maxTemp, mqttCmndId, accuWeatherIcon;

// Beschreibe diese Funktion …
async function setWeather2(weatherIcon, temp, minTemp, maxTemp) {
    /*
        1 = sunny
        2 = sun+cloud
        7 = cloud+blue cloud
        11 = cloud+fog
        15 = cloud rain lightning
        20 = cloud+snowflake
        22 = cloud + 3 snowflakes
        22 = cloud + 5 ice crystals
        22 = cloud + rain + snow
        30 = red thermostat
        31 = blue thermostat
        32 = wind
        40 = rainy cloud
    */
    const weatherObject = {
        "HMI_weather": weatherIcon,
        "HMI_outdoorTemp": {
            "current": Math.round(temp),
            "range": Math.round(minTemp).toString() + ',' + Math.round(maxTemp).toString()
        }
    };
    console.log('NSPSend: ' + JSON.stringify(weatherObject));
    setState(mqttCmndId, JSON.stringify(weatherObject));
}

// Beschreibe diese Funktion …
async function convertIconId(accuWeatherIcon) {
    /*
        1 = sunny
        2 = sun+cloud
        7 = cloud+blue cloud
        11 = cloud+fog
        15 = cloud rain lightning
        20 = cloud+snowflake
        22 = cloud + 3 snowflakes
        22 = cloud + 5 ice crystals
        22 = cloud + rain + snow
        30 = red thermostat
        31 = blue thermostat
        32 = wind
        40 = rainy cloud
    */

    let nspWeatherIcon = 1; // Default "sunny"

    switch (accuWeatherIcon) {
        case 1: // Sunny
        case 2: // Mostly Sunny
        case 33: // Clear
            nspWeatherIcon = 1;
            break;

        case 3: // Partly Sunny
        case 4: // Intermittent Clouds
        case 5: // Hazy Sunshine
        case 21: // Partly Sunny w/ Flurries
            nspWeatherIcon = 2;
            break;

        case 6: // Mostly Cloudy
        case 7: // Cloudy
        case 8: // Dreary (Overcast)
        case 19: // Flurries
        case 20: // Mostly Cloudy w/ Flurries
        case 34: // Mostly Clear
        case 35: // Partly Cloudy
        case 36: // Intermittent Clouds
        case 38: // Mostly Cloudy
        case 43: // Mostly Cloudy w/ Flurries
            nspWeatherIcon = 7;
            break;

        case 11: // Fog
        case 37: // Hazy Moonlight
            nspWeatherIcon = 11;
            break;

        case 12: // Showers
        case 13: // Mostly Cloudy w/ Showers
        case 14: // Partly Sunny w/ Showers
        case 15: // T-Storms
        case 16: // Mostly Cloudy w/ T-Storms
        case 17: // Partly Sunny w/ T-Storms
        case 18: // Rain
        case 39: // Partly Cloudy w/ Showers
        case 40: // Mostly Cloudy w/ Showers
        case 41: // Partly Cloudy w/ T-Storms
        case 42: // Mostly Cloudy w/ T-Storms
            nspWeatherIcon = 15;
            break;

        case 22: // Snow
        case 23: // Mostly Cloudy w/ Snow
        case 24: // Ice
        case 25: // Sleet
        case 26: // Freezing Rain
        case 29: // Rain and Snow
        case 44: // Mostly Cloudy w/ Snow
            nspWeatherIcon = 22;
            break;

        case 30: // Hot
            nspWeatherIcon = 30;
            break;

        case 31: // Cold
            nspWeatherIcon = 31;
            break;

        case 32: // Windy
            nspWeatherIcon = 32;
            break;

    }

    return nspWeatherIcon;
}

// Beschreibe diese Funktion …
async function setWeather(weatherIcon, temp, minTemp, maxTemp) {
    /*
        1 = sunny
        2 = sun+cloud
        7 = cloud+blue cloud
        11 = cloud+fog
        15 = cloud rain lightning
        20 = cloud+snowflake
        22 = cloud + 3 snowflakes
        22 = cloud + 5 ice crystals
        22 = cloud + rain + snow
        30 = red thermostat
        31 = blue thermostat
        32 = wind
        40 = rainy cloud
    */
    const weatherObject = {
        "HMI_weather": weatherIcon,
        "HMI_outdoorTemp": {
            "current": Math.round(temp),
            "range": Math.round(minTemp).toString() + ',' + Math.round(maxTemp).toString()
        }
    };
    console.log('NSPSend: ' + JSON.stringify(weatherObject));
    setState(mqttCmndId, JSON.stringify(weatherObject));
}

// Beschreibe diese Funktion …
async function sendWeather2() {
  // https://developer.accuweather.com/weather-icons
  await setWeather(await convertIconId(getState("accuweather.1.Current.WeatherIcon").val), getState("accuweather.1.Current.Temperature").val, getState("accuweather.1.Daily.Day1.Temperature.Minimum").val, getState("accuweather.1.Daily.Day1.Temperature.Maximum").val);
  console.log(getState("accuweather.1.Current.Temperature").val);
}


mqttCmndId = 'mqtt.0.Haus.Display.nspanel_7BF904.cmnd.NSPSend';
await sendWeather2();
on({id: "accuweather.1.Current.Temperature"/*Temperature*/, change: "any"}, async function (obj) {
  var value = obj.state.val;
  var oldValue = obj.oldState.val;
  await sendWeather2();
});

